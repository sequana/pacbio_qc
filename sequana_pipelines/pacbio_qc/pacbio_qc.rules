#
#  This file is part of Sequana software
#
#  Copyright (c) 2016-2021 - Sequana Development Team
#
#  File author(s):
#      Thomas Cokelaer <thomas.cokelaer@pasteur.fr>
#
#  Distributed under the terms of the 3-clause BSD license.
#  The full license is in the LICENSE file, distributed with this software.
#
#  website: https://github.com/sequana/sequana
#  documentation: http://sequana.readthedocs.io
#
##############################################################################

import os

from sequana import pacbio, sequana_data
from sequana_pipetools import snaketools as sm

# ========================================================= The main config file
# This must be defined before the include
configfile: "config.yaml"
sequana_wrapper_branch = "main"


def func(filename):
    # pacbio data are either BAM of FastQ files
    # if BAM, they may contain a .css.bam extension if the data is made of CCS
    # if output of LIMA tool, you may also have a barcode info such as
    # lbc32-lbc32 and so on. So a file may be called lima_output.lbc32.ccs.bam
    # and the next one lima_output.lb33.ccs.bam. Therefore the sample name is
    # only contaons in the barcode. Removing .ccs.bam is a solution
    # So we will remove the first extension (e.g. .bam) including
    # possible compressed extension
    filename = filename.split("/")[-1]
    if filename.endswith(".bam"):
        return filename.rsplit(".bam")[0]
    else:
        raise IOError("Input files must end in .bam")


# ================================================== The sequana pipeline manager
manager = sm.PipelineManager("pacbio_qc", config, sample_func=func)
if len(manager.samples) == 0:
    logger.error("Could not find any sample")
    sys.exit(1)


# =========================================================  Final results
rule pipeline:
    input:
        expand("{sample}/summary.html", sample=manager.samples),
        ".sequana/rulegraph.svg",
        "multiqc/multiqc_report.html", "summary.json"


# =========================================================  bam to fasta (for kraken)
if config['kraken']['do']:
    rule bam_to_fasta:
        input:
            manager.getrawdata()
        output:
            temp("tmp/{sample}.fasta")
        threads:
            config['bam_to_fasta']['thread']
        run:
            from sequana import pacbio, FastQ
            if input[0].endswith(".bam"):
                p = pacbio.PacbioSubreads(input[0])
                p.to_fasta(output[0], threads=threads)
            else:
                f = FastQ(input[0])
                f.to_fasta(output[0])



# Analysis the input BAM/Fastq , create pictures and summary file


rule pacbio_quality:
    """Pacbio quality control

    Required input:
        - __pacbio_quality__input : the input BAM file

    Required output:
        - __pacbio_quality__output_summary: summary_{sample}.json

    Optional parameters:
        - __pacbio_quality__images_directory: where to save PNG
          images (default to ./images)

    In addition to a summary file with basic statistics, this
    rules creates 5 images with basic histograms about the read
    lengths, the GC content, the ZMW information, the SNR of the
    A,C,G,T nucleotides, and a 2D histogram of GC versus read length

    References:
        `sequana.pacbio <http://sequana.readthedocs.io/en/master/references.html#sequana.pacbio.PacbioSubreads>`_

    """
    input: manager.getrawdata()
    params:
        sample_name = "{sample}"
    output:
        read_len   = "{sample}/images/hist_read_len_{sample}.png",
        GC_content = "{sample}/images/GC_content_{sample}.png",
        ZMW        = "{sample}/images/ZMW_passes_{sample}.png",
        SNR        = "{sample}/images/SNR_{sample}.png",
        GC_vs_len  = "{sample}/images/GC_vs_len_{sample}.png",
        summary    = "{sample}/sequana_summary_pacbio_qc_{sample}.json"
    run:
        import json
        from sequana import pacbio
        import pylab
        def setname(name):
            return name
        ########## labels for plots
        short_name = input[0].replace(".bam","").split("/")[-1]
        bam_pacbio = pacbio.PacbioSubreads(input[0])

        ########## Read length
        # individual histograms
        bam_pacbio.hist_read_length(label=short_name)
        pylab.title("")
        pylab.legend()
        pylab.savefig(setname(output.read_len))

        ########## GC content
        # individual histograms
        bam_pacbio.hist_GC(label=short_name)
        pylab.title("")
        pylab.legend()
        pylab.savefig(setname(output.GC_content))

        ########## ZMW passes
        # individual histograms
        bam_pacbio.hist_nb_passes(label=short_name, bins=20)
        pylab.title("")
        pylab.legend()
        pylab.savefig(setname(output.ZMW))

        ########## SNR
        # individual histograms
        bam_pacbio.hist_snr()
        pylab.title("")
        pylab.savefig(setname(output.SNR))

        # plot GC versus read length
        bam_pacbio.plot_GC_read_len()
        pylab.title("")
        pylab.savefig(setname(output.GC_vs_len))

        # summary
        summary = bam_pacbio.summary()
        with open(output.summary, "w") as fh:
            summary.update(
                {"images":
                    {"hist_read_length": output.read_len,
                    "hist_gc_content": output.GC_content,
                    "hist_snr": output.SNR,
                    "gc_vs_length": output.GC_vs_len,
                    "hist_zmw": output.ZMW}
                })
            summary.update({'sample': params.sample_name})
            summary.update({'generator': "sequana_pacbio_quality"})
            json.dump(summary, fh, indent=True, sort_keys=True)
        pylab.close()






# default output for the html_reports rule
__html_report__input =  ["{sample}/sequana_summary_pacbio_qc_{sample}.json"]

# Do we need the kraken output ? if so, fill variables
extra_kraken = []
if config['kraken']['do'] is True:
    extra_kraken = expand("{sample}/kraken/kraken.html", sample=manager.samples)
    __html_report__input +=  ["{sample}/kraken/kraken.html"]


# HTML reports
rule html_report:
    input:
        __html_report__input
    output:
        "{sample}/summary.html"
    params:
        dir_kraken="{sample}/kraken",
        dir="{sample}"
    message: "create the pacbio BAM QC summary page"
    run:
        from sequana.modules_report.pacbio_input_bam import PacbioInputBAMModule as Module

        # This statements sets the directory where HTML will be saved
        from sequana.utils import config as cfg
        buffer = cfg.output_dir
        cfg.output_dir = params.dir
        m = Module(input[0])
        cfg.output_dir = buffer

        # This creates useless directories (css/images/js)
        m = Module(input[0])

        # Here, we just re-run the KrakenModule to get the HTML content
        # We do not want to save it
        if config['kraken']['do']:
            from sequana.modules_report.kraken import KrakenModule
            kr = KrakenModule(params.dir_kraken, output_filename=None)
            html = kr._get_summary_section()
            m.sections.append({
              "name": "Taxonomic content",
              "anchor": "kraken",
              "content": html
            })
        # In the rule kraken:, a summary.html is created, which is overwritten
        # here
        m.create_html(output[0])


# The kraken analysis
rule sequana_taxonomy:
    input:
        "tmp/{sample}.fasta"
    output:
        "{sample}/kraken/kraken.html"
    params:
        databases=config['kraken']['databases']
    container:
        config['apptainers']['sequana']
    threads:
        config['kraken']['thread']
    shell:
        """

        sequana_taxonomy --file1 {input} --output-directory {wildcards.sample} --thread {threads} --databases {params.databases}

        """


# ========================================================== multiqc


sequana_multiqc_input = expand("{sample}/sequana_summary_pacbio_qc_{sample}.json", 
    sample=manager.samples) + extra_kraken


#config['multiqc']['options'] = config["multiqc"]["options"] + f" --comment '{comments}'"


rule multiqc:
    input:
        sequana_multiqc_input
    output:
        "multiqc/multiqc_report.html"
    params:
       options=config['multiqc']['options'],
       input_directory=config['multiqc']['input_directory'],
       config_file=config['multiqc']['config_file'],
       modules=config['multiqc']['modules']
    log:
       "multiqc/multiqc.log"
    wrapper:
       f"{sequana_wrapper_branch}/wrappers/multiqc"


rule plotting_and_stats:
    input: expand("{sample}/sequana_summary_pacbio_qc_{sample}.json", sample=manager.samples)

    output: "summary.json"#, "summary.png"
    run:
        import json
        from sequana.summary import Summary
        from sequana_pipelines.pacbio_qc import version

        summary = Summary("pacbioqc", caller="sequana_pacbio_qc", sample_name="multi samples")
        summary.description = "summary sequana_pacbio_qc pipeline"
        summary.pipeline_version = version

        for filename in input:
            data = json.load(open(filename, 'r'))
            sample = data['sample']
            summary.data[sample] = data['read_stats']
            summary.data[sample]['sample'] = sample

        summary.to_json("summary.json")



# ====================================================================== rulegraph

rule rulegraph:
    input: str(manager.snakefile)
    output:
        svg = "rulegraph/rulegraph.dot"
    params:
        mapper = {"multiqc": "../multiqc/multiqc_report.html"},
        configname = "config.yaml"
    wrapper:
        f"{sequana_wrapper_branch}/wrappers/rulegraph"


rule dot2svg:
    input:
        "rulegraph/rulegraph.dot"
    output:
        ".sequana/rulegraph.svg"
    container:
        config['apptainers']['graphviz']
    shell:
        """dot -Tsvg {input} -o {output}"""




localrules: multiqc, rulegraph, plotting_and_stats


onsuccess:

    # This was created by calling Module but is not needed
    shell('rm -rf css images js')

    from sequana import logger
    logger.setLevel("INFO")

    # This should create the stats plot and the Makefile
    manager.teardown()
    manager.clean_multiqc("multiqc/multiqc_report.html")

    # Now, the main HTML report
    import pandas as pd
    from sequana.utils.datatables_js import DataTable
    import json

    # Summary table with links towards fastqc
    data = json.load(open("summary.json", "r"))
    df = pd.DataFrame(data['data'])
    df = df.T
    del df['sample']
    df = df.reset_index().rename({'index': 'sample'}, axis=1)
    for col in ['count', 'nb_reads', 'nb_bases', 'min', 'max']:
        try: df[col] = [int(x) for x in df[col]]
        except: pass
    for col in ['mean', 'mean_GC', 'std', "mean_passes"]:
        try: df[col] = [round(float(x), 2) for x in df[col]]
        except: pass
    for col in ["25%","50%","75%", "count"]:
        del df[col]
    df = df.rename({
            "min":"min_read_length", 
            "max":"max_read_length",
            "std":"std_read_length",
            "mean":"mean_length"}, axis=1)


    df['link'] = ["{}/summary.html".format(x) for x in df['sample']] 

    datatable = DataTable(df, 'pacbio_qc', index=False)
    datatable.datatable.datatable_options = {'paging': 'false',
                                              'buttons': ['copy', 'csv'],
                                             'bSort': 'true',
                                            'dom':"BRSPfrti"
                                            }
    datatable.datatable.set_links_to_column('link', 'sample')
    js = datatable.create_javascript_function()
    htmltable = datatable.create_datatable()

    # The summary table at the top
    from sequana_pipelines.pacbio_qc import version as vv
    df_general = pd.DataFrame({
        "samples": len(manager.samples),
        "sequana_pacbio_qc_version": vv}, index=["summary"])

    datatable = DataTable(df_general.T, 'general', index=True)
    datatable.datatable.datatable_options = {'paging': 'false',
                                            'bFilter': 'false',
                                             'bInfo': 'false',
                                              'header': 'false',
                                             'bSort': 'true'}
    js2 = datatable.create_javascript_function()
    htmltable2 = datatable.create_datatable(style="width: 20%; float:left" )


    from sequana.modules_report.summary import SummaryModule2
    data = {
            "name": manager.name,
            "rulegraph": ".sequana/rulegraph.svg",
            "stats": "stats.txt",
            "pipeline_version": vv

         }

    # Here the is main HTML page report
    contents = "<h2> General information</h2>"
    contents += """<div style="float:left; width:30%">{}</div>""".format(js2 + htmltable2)
    contents += """<p>Here below you can find a summary table with basic statistics about your reads. Click on the links in the first column of the table to jump to dedicated summary for your sample. There you can find histograms, and Kraken plots if taxonomy was set on. The multiac report (link below) is also usefil to compare the disfferent statistics. </p>"""


    # the main table
    contents += """<div style="clear:both"></div>"""
    contents += """<hr>Please look at the <b><a href="multiqc/multiqc_report.html">multiqc report</a></b> for more details about your run.<br>"""
    #contents += """A file with <a href="md5.txt">md5sum</a> is also available for the input file."""
    contents += "<br><hr><div>Here is a summary for all the samples. The CSV button allows you to export the basic statistics.  {}</div>".format(js + htmltable)


    s = SummaryModule2(data, intro=contents)


    # finally, some cleanup
    shell("rm -rf rulegraph")   # embedded in report
    shell("chmod -R g+w .")

onerror:
    from sequana_pipetools.errors import PipeError
    p = PipeError("pacbio_qc")
    p.status()





